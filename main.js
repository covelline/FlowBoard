// Generated by CoffeeScript 1.7.1
(function() {
  $(function() {
    var addComment, comments, commentsRef, firstLoad, formatTimeStamp, getSliderTime, interval, maxTime, minTime, offsetX, playing, sendComment, setSliderTime, showComments, showTime, updateCommentPosition, updateTime;
    comments = [];
    minTime = 0;
    maxTime = 0;
    showTime = 10000;
    offsetX = $("#display").width();
    playing = false;
    interval = 33;
    setInterval(function() {
      if (playing) {
        return setSliderTime(getSliderTime() + interval);
      }
    }, interval);
    updateTime = function() {
      var currentTimeStr;
      currentTimeStr = formatTimeStamp(getSliderTime());
      return $("#time").text(currentTimeStr);
    };
    getSliderTime = function() {
      return parseInt($("#slider").val());
    };
    updateCommentPosition = function() {
      var createdAt, current, elm, jelm, width, x, _i, _len, _ref, _results;
      _ref = $("#display .comment");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elm = _ref[_i];
        jelm = $(elm);
        createdAt = parseInt(jelm.attr("fb-createdAt"));
        if (!createdAt) {
          continue;
        }
        current = getSliderTime();
        width = $("#display").width() - jelm.width();
        x = width * (createdAt - current) / showTime + offsetX;
        _results.push(jelm.css("left", x));
      }
      return _results;
    };
    formatTimeStamp = function(timestamp) {
      var date;
      date = new Date(timestamp);
      return "" + (date.getFullYear()) + "-" + (date.getMonth() + 1) + "-" + (date.getDate()) + " " + (date.getHours()) + "-" + (date.getMinutes()) + "-" + (date.getSeconds());
    };
    addComment = function(comment) {
      var first, _i, _len;
      comments.push(comment);
      first = true;
      for (_i = 0, _len = comments.length; _i < _len; _i++) {
        comment = comments[_i];
        if (comment.createdAt) {
          if (first) {
            minTime = comment.createdAt;
            maxTime = comment.createdAt;
            first = false;
          } else {
            minTime = Math.min(comment.createdAt, minTime);
            maxTime = Math.max(comment.createdAt, minTime);
          }
        }
      }
      $("#slider").attr("min", minTime - 10000);
      return $("#slider").attr("max", maxTime);
    };
    showComments = function(startAt, endAt) {
      var comment, _i, _len, _results;
      $("#display").html("");
      _results = [];
      for (_i = 0, _len = comments.length; _i < _len; _i++) {
        comment = comments[_i];
        _results.push($("#display").append($("<div class=\"comment\" fb-createdAt=\"" + comment.createdAt + "\">\n  " + comment.text + "\n</div>")));
      }
      return _results;
    };
    firstLoad = true;
    commentsRef = new Firebase("https://flowboard.firebaseio.com/comments");
    commentsRef.on("child_added", function(snapshot) {
      var comment;
      comment = $.extend(snapshot.val(), {
        id: snapshot.name()
      });
      addComment(comment);
      showComments();
      if (firstLoad) {
        firstLoad = false;
        setSliderTime(Date.now());
        return playing = true;
      }
    });
    $("#submit-button").click(sendComment);
    $("#text-input").keypress(function(e) {
      if (e.which === 13) {
        sendComment();
      }
      return true;
    });
    sendComment = function() {
      commentsRef.push({
        text: $("#text-input").val(),
        createdAt: Firebase.ServerValue.TIMESTAMP
      });
      $("#text-input").val("");
      setSliderTime(Date.now());
      return playing = true;
    };
    $("#slider").on("input", function() {
      playing = false;
      updateTime();
      return updateCommentPosition();
    });
    setSliderTime = function(time) {
      var max;
      max = $("#slider").attr("max");
      $("#slider").attr("max", Math.max(max, time));
      $("#slider").val(time);
      updateTime();
      return updateCommentPosition();
    };
    return $("#play-button").click(function() {
      return playing = !playing;
    });
  });

}).call(this);
